import React, { useState, useMemo } from 'react';
import { PlusCircle, Trash2, Edit, Briefcase } from 'lucide-react';
import KpiCard from '../components/KpiCard';
import { Card, Button, Form, Row, Col } from 'react-bootstrap';

const InvestmentsTab = ({ investments, onAdd, onUpdate, onDelete, formatCurrency }) => {
    const [isVisible, setVisible] = useState(false); const [editing, setEditing] = useState(null);
    const { totalInvested, totalCurrentValue, overallGainLoss } = useMemo(() => {
        const ti = investments.reduce((s, i) => s + i.initialValue, 0); const tc = investments.reduce((s, i) => s + i.currentValue, 0); return { totalInvested: ti, totalCurrentValue: tc, overallGainLoss: tc - ti };
    }, [investments]);
    const handleEdit = (inv) => { setEditing(inv); setVisible(true); };
    const handleSubmit = (inv) => { if (editing) onUpdate({ ...editing, ...inv }); else onAdd(inv); setEditing(null); setVisible(false); };
    return (<div className="space-y-4"><Row className="g-4"><Col md={4}><KpiCard title="Total Invested" value={formatCurrency(totalInvested)} color="text-primary" /></Col><Col md={4}><KpiCard title="Current Value" value={formatCurrency(totalCurrentValue)} color="text-info" /></Col><Col md={4}><KpiCard title="Overall Gain/Loss" value={formatCurrency(overallGainLoss)} color={overallGainLoss >= 0 ? "text-success" : "text-danger"} /></Col></Row><div className="text-center"><Button variant="success" onClick={() => { setEditing(null); setVisible(!isVisible);}}><PlusCircle size={18} className="me-2" /> {isVisible && !editing ? 'Cancel' : 'Add Investment'}</Button></div>{isVisible && <AddInvestmentForm onSubmit={handleSubmit} onCancel={()=>{setEditing(null); setVisible(false)}} investment={editing} />}<Row className="g-4">{investments.length > 0 ? investments.map(inv => <Col md={6} lg={4} key={inv.id}><InvestmentCard investment={inv} onEdit={handleEdit} onDelete={onDelete} formatCurrency={formatCurrency} /></Col>) : <p className="text-center text-muted py-5">No investments added yet.</p>}</Row></div>);
};
const AddInvestmentForm = ({ onSubmit, onCancel, investment }) => {
    const [name, setName] = useState(investment?.name || ''); const [type, setType] = useState(investment?.type || 'Mutual Fund'); const [initial, setInitial] = useState(investment?.initialValue || ''); const [current, setCurrent] = useState(investment?.currentValue || ''); const types = ['Mutual Fund', 'Stocks', 'Gold', 'Fixed Deposit (FD)'];
    return (<Card><Card.Body><Form onSubmit={e => {e.preventDefault(); onSubmit({ name, type, initialValue: parseFloat(initial), currentValue: parseFloat(current) });}}><h3 className="h5 text-center mb-3">{investment ? 'Edit' : 'New'} Investment</h3><Row className="g-3"><Col md={6}><Form.Control value={name} onChange={e => setName(e.target.value)} placeholder="Name" required /></Col><Col md={6}><Form.Select value={type} onChange={e => setType(e.target.value)}>{types.map(t => <option key={t} value={t}>{t}</option>)}</Form.Select></Col><Col md={6}><Form.Control type="number" value={initial} onChange={e => setInitial(e.target.value)} placeholder="Initial Value (₹)" required /></Col><Col md={6}><Form.Control type="number" value={current} onChange={e => setCurrent(e.target.value)} placeholder="Current Value (₹)" required /></Col></Row><div className="text-center mt-3"><Button type="submit" variant="primary" className="me-2">{investment ? 'Update' : 'Save'}</Button><Button type="button" variant="secondary" onClick={onCancel}>Cancel</Button></div></Form></Card.Body></Card>);
};
const InvestmentCard = ({ investment, onEdit, onDelete, formatCurrency }) => {
    const gain = investment.currentValue - investment.initialValue; const percent = investment.initialValue > 0 ? (gain / investment.initialValue) * 100 : 0;
    return (<Card className="h-100 shadow-sm"><Card.Body className="d-flex flex-column"><div className="d-flex justify-content-between align-items-start"><Card.Title as="h5" className="d-flex align-items-center"><Briefcase size={20} className="me-2 text-primary"/>{investment.name}</Card.Title><div><Button variant="light" size="sm" className="me-1" onClick={() => onEdit(investment)}><Edit size={16}/></Button><Button variant="light" size="sm" onClick={() => onDelete(investment.id)}><Trash2 size={16}/></Button></div></div><div className="text-muted small mb-3">{investment.type}</div><Row className="g-2 text-sm"><Col>Invested:</Col><Col className="text-end fw-bold">{formatCurrency(investment.initialValue)}</Col><Col>Current:</Col><Col className="text-end fw-bold">{formatCurrency(investment.currentValue)}</Col></Row><Card.Footer className={`mt-auto text-center fw-bold text-${gain >= 0 ? 'success' : 'danger'}`}>{gain >= 0 ? '+' : ''}{formatCurrency(gain)} ({percent.toFixed(2)}%)</Card.Footer></Card.Body></Card>);
};
export default InvestmentsTab;