import React, { useMemo, useState, useCallback } from 'react';
import KpiCard from '../components/KpiCard';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, Sector } from 'recharts';
import { ArrowRight } from 'lucide-react';
import { Row, Col, Card, ListGroup } from 'react-bootstrap';

const DashboardTab = ({ allData, formatCurrency, theme, totalIncome, totalExpenses }) => {
    const savings = totalIncome - totalExpenses; const savingsRate = totalIncome > 0 ? (savings / totalIncome) * 100 : 0;
    const greeting = useMemo(() => { const h = new Date().getHours(); return h < 12 ? "Good Morning" : h < 18 ? "Good Afternoon" : "Good Evening"; }, []);
    return (<div className="space-y-6"><h2 className="h3 font-bold">{greeting}!</h2><Row className="g-4"><Col md={4}><KpiCard title="Monthly Income" value={formatCurrency(totalIncome)} color="text-success" /></Col><Col md={4}><KpiCard title="Monthly Expenses" value={formatCurrency(totalExpenses)} color="text-danger" /></Col><Col md={4}><KpiCard title="Savings Rate" value={`${savingsRate.toFixed(1)}%`} color="text-primary" /></Col></Row><Row className="g-4"><Col lg={12}><Card className="shadow-sm"><Card.Body><Card.Title className="text-center mb-4">Last 12 Months Overview</Card.Title><YearlyOverviewChart allData={allData} theme={theme} formatCurrency={formatCurrency} /></Card.Body></Card></Col><Col lg={8}><Card className="shadow-sm h-100"><Card.Body><Card.Title className="text-center mb-4">Expense Breakdown</Card.Title><ExpensePieChart currentMonthData={allData[new Date().toISOString().slice(0, 7)] || {}} formatCurrency={formatCurrency}/></Card.Body></Card></Col><Col lg={4}><Card className="shadow-sm h-100"><Card.Body><Card.Title className="text-center mb-4">Recent Transactions</Card.Title><RecentTransactionsList allData={allData} formatCurrency={formatCurrency}/></Card.Body></Card></Col></Row></div>);
};
const YearlyOverviewChart = ({ allData, theme, formatCurrency }) => { const data = useMemo(() => { const d = []; for (let i = 11; i >= 0; i--) { const date = new Date(); date.setMonth(date.getMonth() - i); const key = date.toISOString().slice(0,7); const m = allData[key] || {}; d.push({ name: date.toLocaleString('default', {month:'short'}), income: (m.incomes||[]).reduce((s,i)=>s+i.amount,0), expense: (m.expenses||[]).reduce((s,i)=>s+i.amount,0) }); } return d; }, [allData]); return <ResponsiveContainer width="100%" height={300}><BarChart data={data}><CartesianGrid strokeDasharray="3 3" /><XAxis dataKey="name" /><YAxis tickFormatter={v=>`â‚¹${v/1000}k`} /><Tooltip formatter={v=>formatCurrency(v)}/><Legend/><Bar dataKey="income" fill="#198754"/><Bar dataKey="expense" fill="#dc3545"/></BarChart></ResponsiveContainer>};
const ExpensePieChart = ({ currentMonthData, formatCurrency }) => { const [activeIndex, setActiveIndex] = useState(0); const data = useMemo(() => Object.entries((currentMonthData.expenses || []).reduce((acc, e) => { acc[e.category] = (acc[e.category] || 0) + e.amount; return acc; }, {})).map(([name, value]) => ({name, value})), [currentMonthData]); const onEnter = useCallback((_, i) => setActiveIndex(i), []); if(data.length === 0) return <p className="text-center text-muted py-5">No expenses this month.</p>; return (<ResponsiveContainer width="100%" height={300}><PieChart><Pie activeIndex={activeIndex} activeShape={renderActiveShape} data={data} dataKey="value" onMouseEnter={onEnter}>{data.map((e, i) => <Cell key={`cell-${i}`} fill={['#0d6efd', '#198754', '#ffc107', '#fd7e14', '#6f42c1'][i % 5]} />)}</Pie><Tooltip formatter={v=>formatCurrency(v)}/></PieChart></ResponsiveContainer>);};
const renderActiveShape = (props) => { const { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle, fill, payload, percent } = props; return (<g><text x={cx} y={cy} dy={8} textAnchor="middle" fill={fill}>{payload.name}</text><Sector cx={cx} cy={cy} innerRadius={innerRadius} outerRadius={outerRadius} startAngle={startAngle} endAngle={endAngle} fill={fill} /><text x={cx} y={cy-12} textAnchor="middle" fill="#999">{`(Rate ${(percent * 100).toFixed(2)}%)`}</text></g>);};
const RecentTransactionsList = ({ allData, formatCurrency }) => { const trans = useMemo(()=>[...(allData[new Date().toISOString().slice(0,7)]?.incomes || []).map(i=>({...i, type:'income'})), ...(allData[new Date().toISOString().slice(0,7)]?.expenses || []).map(e=>({...e, type:'expense'}))].sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt)).slice(0,5), [allData]); if(trans.length===0) return <p className="text-center text-muted py-5">No transactions.</p>; return <ListGroup variant="flush">{trans.map(t=><ListGroup.Item key={t.id} className="d-flex justify-content-between align-items-center"><div><p className="fw-bold mb-0">{t.source}</p><p className="text-muted small mb-0">{t.category}</p></div><span className={`fw-bold text-${t.type==='income'?'success':'danger'}`}>{t.type==='income'?'+':'-'} {formatCurrency(t.amount)}</span></ListGroup.Item>)}</ListGroup>};
export default DashboardTab;
